package util;

public class AICar extends Car {
	
	public Vec[] track = new Vec[12];
	private Vec steering = new Vec(0f, 0f);
	public Vec currentTarget = new Vec(0f, 0f);
	public int targetIndex = 0;
	public AICar(Vec position, float mass, float maxSpeed, int carNumber) {
		super(position, mass);
		fillTrack(carNumber);
		currentTarget = track[0];
		this.maxSpeed = maxSpeed;
	}
	
	@Override
	public void update(float dt) {
		calculateSteering();
		velocity.x = velocity.x + steering.x * dt;
		velocity.y = velocity.y + steering.y * dt;
		position.x = position.x + velocity.x * dt;
		position.y = position.y + velocity.y * dt;
		
		if(velocity.x != 0) {
			facing.x = (velocity.x / Vec.length(velocity.x, velocity.y));
		}
		if(velocity.y != 0) {
			facing.y = (velocity.y / Vec.length(velocity.x, velocity.y));
		}
		rotation = Vec.angle(facing.x, facing.y, (new Vec(0, 1)).x, (new Vec(0, 1)).y);
		if(facing.x > 0) rotation *= -1;
	}
	
	private void calculateSteering() {
		if(Vec.distance(position.x, position.y, currentTarget.x, currentTarget.y) < 20) {
			targetIndex++;
			if(targetIndex > 11) targetIndex = 0;
			currentTarget = track[targetIndex];
		}
		Vec desiredVelocity = new Vec(0f, 0f);
		Vec tempVec = new Vec(currentTarget.x - position.x, currentTarget.y - position.y);
		Vec.normalize(tempVec);
		desiredVelocity.x = tempVec.x * maxSpeed;
		desiredVelocity.y = tempVec.y * maxSpeed;
		steering.x = desiredVelocity.x - velocity.x;
		steering.y = desiredVelocity.y - velocity.y;
	}
	
	public void fillTrack(int carNumber) {
		if(carNumber == 1) {
		 	    track[0] = new Vec(-10.0f, 100.0f);
		 	    track[1] = new Vec(-10.0f, 206.0f);
		 	    track[2] = new Vec(-15.5f, 212.5f);
		 	    track[3] = new Vec(-32.5f, 244.5f);
		 	    track[4] = new Vec(-67.0f, 273.0f);
		 	    track[5] = new Vec(-136.0f, 274.0f);
		 	    track[6] = new Vec(-178.0f, 214.0f);
		 	    track[7] = new Vec(-167.0f, 40.0f);
		 	    track[8] = new Vec(-171.0f, -41.0f);
		 	    track[9] = new Vec(-118.0f, -97.0f);
		 	    track[10] = new Vec(-37.0f, -79.0f);
		 	    track[11] = new Vec(-14.5f, -37.0f);
		}
		else if (carNumber == 2) {
		 	    track[0] = new Vec(10.0f, 199.0f);
		 	    track[1] = new Vec(-12.0f, 255.0f);
		 	    track[2] = new Vec(-81.5f, 301.0f);
		 	    track[3] = new Vec(-169.5f, 278.5f);
		 	    track[4] = new Vec(-211.5f, 208.0f);
		 	    track[5] = new Vec(-211.0f, 85.0f);
		 	    track[6] = new Vec(-211.0f, 23.0f);
		 	    track[7] = new Vec(-185.0f, -74.5f);
		 	    track[8] = new Vec(-129.0f, -113.5f);
		 	    track[9] = new Vec(-50.0f, -100.5f);
		 	    track[10] = new Vec(-2.0f, -56.0f);
		 	    track[11] = new Vec(-10.0f, -22.5f);		
		}
		else if (carNumber == 3) {
		 	    track[0] = new Vec(17.0f, 209.0f);
		 	    track[1] = new Vec(-31.5f, 294.0f);
		 	    track[2] = new Vec(-122.0f, 317.5f);
		 	    track[3] = new Vec(-210.5f, 266.5f);
		 	    track[4] = new Vec(-230.0f, 161.0f);
		 	    track[5] = new Vec(-230.0f, 49.5f);
		 	    track[6] = new Vec(-223.0f, -32.5f);
		 	    track[7] = new Vec(-169.5f, -110.0f);
		 	    track[8] = new Vec(-101.5f, -136.0f);
		 	    track[9] = new Vec(-38.0f, -114.5f);
		 	    track[10] = new Vec(18.0f, -63.0f);
		 	    track[11] = new Vec(21.5f, -3.0f);
		}
	}
	
}