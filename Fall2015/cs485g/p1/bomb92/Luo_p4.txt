Script started on Thu 01 Oct 2015 11:19:14 AM EDT
]0;ylu236@ylu236: ~/fall2015/cs485g/p1/bomb92ylu236@ylu236:~/fall2015/cs485g/p1/bomb92$ ls -l
total 712
-rwxrwxr-x 1 ylu236 ylu236  28104 Oct  1 09:01 [0m[01;32mbomb[0m
-rw-r--r-- 1 ylu236 ylu236   3545 Oct  1 09:01 bomb.c
-rw-rw-r-- 1 ylu236 ylu236     62 Oct  1 11:08 Defuse_Commands.txt
-rw-rw-r-- 1 ylu236 ylu236 688128 Oct  1 11:08 Luo_p1.txt
-rw-rw-r-- 1 ylu236 ylu236      0 Oct  1 11:19 Luo_p4.txt
-rw-rw-r-- 1 ylu236 ylu236     56 Oct  1 09:01 README
]0;ylu236@ylu236: ~/fall2015/cs485g/p1/bomb92ylu236@ylu236:~/fall2015/cs485g/p1/bomb92$ gb[K[Kgdb bomb 
GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) b phase_4
Breakpoint 1 at 0x8048e29
(gdb) define rt
Type commands for definition of "rt".
End with a line saying just "end".
>ni
>disas
>end
(gdb) rt
The program is not being run.
(gdb) r Defuse_Commands.txt 
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
9

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) b 0x8049455
Function "0x8049455" not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) break explode_bomb
Breakpoint 2 at 0x8049455
(gdb) until *0x804a771

Breakpoint 2, 0x08049455 in explode_bomb ()
(gdb) r[Kq
A debugging session is active.

	Inferior 1 [process 11734] will be killed.

Quit anyway? (y or n) y
]0;ylu236@ylu236: ~/fall2015/cs485g/p1/bomb92ylu236@ylu236:~/fall2015/cs485g/p1/bomb92$ gdb bomb 
GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) b pp[Khase_4
Breakpoint 1 at 0x8048e29
(gdb) d[Kdefine rt
Type commands for definition of "rt".
End with a line saying just "end".
>ni
>disas
>end
(gdb) r Defuse_Commands.txt 
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
9 1

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) b explode_bomb
Breakpoint 2 at 0x8049455
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt[K[Kx/s 0x804a771
0x804a771:	"%d %d"
(gdb) r Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 2

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) b explode_bomb
Note: breakpoint 2 also set at pc 0x8049455.
Breakpoint 3 at 0x8049455
(gdb) r[Krt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r
eax            0x2	2
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e50	0x8048e50 <phase_4+39>
eflags         0x282	[ SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r
eax            0x2	2
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e71	0x8048e71 <phase_4+72>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) e[Krt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) disas func4
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e75	0x8048e75 <phase_4+76>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) x/s $ebx
0xffffd6c4:	"\361\327\377\377\035\330\377\377"
(gdb) print *(int*) $ebx
$1 = -10255
(gdb) print *(int*) $ebx[C[C[C[C[C[C[10Px/s[C[C[C[C[C[C[C[C[C[C[C[5Pi rdisas func4[C[C[C[C[C[Crt[Ki r[1Prti r[1Prt[K[Krt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) disas func4
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e78	0x8048e78 <phase_4+79>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) i rdisas func4[C[C[C[C[C[Crt[Kprint *(int*) $ebx[C[C[C[C[C[C[10Px/s[C[C[C[C[C[C[C[C[C[C[C[5Pi rdisas func4[C[C[C[C[C[Crt[Kdisas func4[C[C[C[C[C[Ci r[K[K[K[Kdisas func4[C[C[C[C[C[Crt[Kdisas func4
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e78	0x8048e78 <phase_4+79>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) x/s 0xffffd6c4
0xffffd6c4:	"\361\327\377\377\035\330\377\377"
(gdb) x/s 0xffffd6c4[C[C[C[C[C[Ci r[Kdisas func4
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) si
0x08048dcc in func4 ()
(gdb) ni
0x08048dcd in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
=> 0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) ni
0x08048dce in func4 ()
(gdb) ni
0x08048dd1 in func4 ()
(gdb) ni
0x08048dd5 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
=> 0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd9 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
=> 0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddf in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
=> 0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
=> 0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de3 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
=> 0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de6 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
=> 0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
=> 0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dea in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
=> 0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ded in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
=> 0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x0	0
ecx            0x7	7
edx            0x1	1
ebx            0x7	7
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048ded	0x8048ded <func4+33>
eflags         0x202	[ IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) i r[1Prtdisas[3Pnidisas[3Pnisidisas func4[C[C[C[C[C[Cx/s 0xffffd6c4[C[C[C[C[C[Ci r[Kdisas func4[C[C[C[C[C[Ci r[Kdisas func4[C[C[C[C[C[Crt[Kprint *(int*) $ebx[C[C[C[C[C[C[10Px/s[C[C[C[C[C[C[C[C[C[C[C[Kdisas func4[C[C[C[C[C[Crt[Ki r[1Prti r[1Prti r[1Prt[K[Kdisas
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
=> 0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x0	0
ecx            0x7	7
edx            0x1	1
ebx            0x7	7
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048ded	0x8048ded <func4+33>
eflags         0x202	[ IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) r[Kr Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
9

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) define rt
Redefine command "rt"? (y or n) n
Command "rt" not redefined.
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) r Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 9

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) x/s $0xe
Value can't be converted to integer.
(gdb) x/s $0xe[K[K[K[K$esp
0xffffd5e0:	"\020\331\004\bq\247\004\b\370\325\377\377\374\325\377\377\225\247\004\b\002"
(gdb) i r
eax            0x2	2
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e61	0x8048e61 <phase_4+56>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) x/s ff[K[Kox[K[K0xffffd5f8
0xffffd5f8:	"\001"
(gdb) print *(int*) 0xffffd5f8
$2 = 1
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) s[Kx/s $eax
0x1:	<error: Cannot access memory at address 0x1>
(gdb) x/s $eax[C[1P $eaxa $eax[1P $eaxw $eax
0x1:	<error: Cannot access memory at address 0x1>
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e78	0x8048e78 <phase_4+79>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) disas func4
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e7d in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
=> 0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rtdisas func4[K[K[K[K[K[K[K[K[K[K[Kr[Kr Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 9

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) b phase_4
Note: breakpoint 1 also set at pc 0x8048e29.
Breakpoint 4 at 0x8048e29
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) si
0x08048dcc in func4 ()
(gdb) rt
0x08048dcd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
=> 0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) x/s[Ks[Ka [K[K[K[Kir [K[K r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5d8	0xffffd5d8
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048dcd	0x8048dcd <func4+1>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) i r[1Prtsirtb phase_4[C[C[C[C[C[Cr Defuse_Commands.txt [C[C[C[C[C[C[Ct[Kdisas func4[C[C[C[C[C[Ci r[Kx/w $eaxs[C[C[C[C[C[C[C[C[C[C[Crt[Kprint *(int*) 0xffffd5f8[C[C[C[C[C[Crt[Kx/s $eaxw[C[C[C[C[C[C[C[C[C[C[C[5Pi rdisas func4[K[K[K[K[K[K[K[K[K[K[Kdisas
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
=> 0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i $[Kr $ebx
ebx            0xffffd6c4	-10556
(gdb) i r $ebx[K[K[Kesp
esp            0xffffd5d8	0xffffd5d8
(gdb) x[Kp/x[K[K[Kx/s 0xffffd5c4
0xffffd5c4:	"q\247\004\b\350\325\377\377<\223\004\b\020\331\004\bP"
(gdb) rt
0x08048dce in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
=> 0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
=> 0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd5 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
=> 0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd9 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
=> 0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x0	0
ecx            0x0	0
edx            0x1	1
ebx            0xffffd6c4	-10556
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048ddd	0x8048ddd <func4+17>
eflags         0x286	[ PF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) disas
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x0	0
ecx            0x0	0
edx            0x1	1
ebx            0xffffd6c4	-10556
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048ddd	0x8048ddd <func4+17>
eflags         0x286	[ PF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) disas
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddf in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
=> 0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
=> 0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de3 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
=> 0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de6 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
=> 0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
=> 0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dea in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
=> 0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ded in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
=> 0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x0	0
ecx            0x7	7
edx            0x1	1
ebx            0x7	7
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048ded	0x8048ded <func4+33>
eflags         0x202	[ IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) rt
0x08048def in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
=> 0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
=> 0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df4 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
=> 0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
=> 0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dfc in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
=> 0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dff in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
=> 0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e04 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
=> 0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e06 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
=> 0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e23 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
=> 0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e26 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
=> 0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e27 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
=> 0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e28 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
=> 0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e7d in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
=> 0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r $eax
eax            0xb	11
(gdb) r Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 11

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) b phae_[K[Ka[Kse_4
Note: breakpoints 1 and 4 also set at pc 0x8048e29.
Breakpoint 5 at 0x8048e29
(gdb) define[K[K[K[K[K[Krt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) b explode_bomb
Note: breakpoints 2 and 3 also set at pc 0x8049455.
Breakpoint 6 at 0x8049455
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e7d in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
=> 0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e80 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
=> 0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r $eax
eax            0xb	11
(gdb) rt
0x08048e89 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
=> 0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) q
A debugging session is active.

	Inferior 1 [process 11754] will be killed.

Quit anyway? (y or n) y
]0;ylu236@ylu236: ~/fall2015/cs485g/p1/bomb92ylu236@ylu236:~/fall2015/cs485g/p1/bomb92$ gdb bomb 
GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...done.
(gdb) b phase_4
Breakpoint 1 at 0x8048e29
(gdb) define rt
Type commands for definition of "rt".
End with a line saying just "end".
>ni
>disas
>end
(gdb) rt
The program is not being run.
(gdb) r Defuse_Commands.txt 
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 13

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) b explode_bomb
Breakpoint 2 at 0x8049455
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e7d in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
=> 0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e80 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
=> 0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r $eax
eax            0xb	11
(gdb) r[Kr Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 9 

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i[Krt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e78	0x8048e78 <phase_4+79>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) si
0x08048dcc in func4 ()
(gdb) rt
0x08048dcd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
=> 0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dce in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
=> 0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
=> 0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd5 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
=> 0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd9 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
=> 0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddf in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
=> 0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
=> 0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de3 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
=> 0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de6 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
=> 0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r $ecx
ecx            0xe	14
(gdb) rt
0x08048de8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
=> 0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rti r $ecx
ecx            0xe	14
(gdb) rt
0x08048dea in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
=> 0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rti r $ecx
ecx            0x7	7
(gdb) ir[K r $ebx
ebx            0x0	0
(gdb) rt
0x08048ded in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
=> 0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rti r $ebx
ebx            0x7	7
(gdb) i r $ebx[K[Kdx
edx            0x1	1
(gdb) rt
0x08048def in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
=> 0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
=> 0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df4 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
=> 0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
=> 0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dfc in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
=> 0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt[K[Ki r $ecx
ecx            0x6	6
(gdb) i r $ecx[C[C[C[C[C[Crt[Ki r $edxbx[C[C[C[C[C[Crt[Ki r $ebxcx[C[C[C[C[C[Crt[Ki r $ecx[C[C[C[C[C[Crt[Ki r $ecx[C[C[C[C[C[Crt[Ksii r[1Prt[K[Krt
0x08048dff in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
=> 0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e04 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
=> 0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e06 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
=> 0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i[Ki r %[K$eb[Kbx
ebx            0x7	7
(gdb) i r $ebx[1Pxdx
edx            0x1	1
(gdb) i r $edx[1Pxcx
ecx            0x1	1
(gdb) rt
0x08048e23 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
=> 0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r $esp
esp            0xffffd5c0	0xffffd5c0
(gdb) x/s 0xffffd5c0
0xffffd5c0:	"\001"
(gdb) rt
0x08048e26 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
=> 0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rtx/s 0xffffd5c0[C[C[C[C[C[C[6Pi r $esp[C[C[C[C[C[Cx/s 0xffffd5c0[C[C[C[C[C[C[6Pi r $esp
esp            0xffffd5d4	0xffffd5d4
(gdb) i r $esp[C[C[C[C[C[Crt[Kx/s 0xffffd5c0[K[Kd4
0xffffd5d4:	"\304\326\377\377"
(gdb) print *(char*) 0xffffd5d4
$1 = -60 '\304'
(gdb) i r $esp
esp            0xffffd5d4	0xffffd5d4
(gdb) print *(int*) 0xffffd4d4
$2 = 134535440
(gdb) print *(int*) 0xffffd4d4[1Pd45d4
$3 = -10556
(gdb) i r $ebx
ebx            0x7	7
(gdb) rt
0x08048e27 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
=> 0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r $esi
esi            0xe	14
(gdb) rt
0x08048e28 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
=> 0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e7d in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
=> 0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r $eax
eax            0xb	11
(gdb) r [K[Kr Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 9

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) si
0x08048dcc in func4 ()
(gdb) rt
0x08048dcd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
=> 0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dce in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
=> 0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
=> 0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd5 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
=> 0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd9 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
=> 0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddf in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
=> 0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
=> 0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de3 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
=> 0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de6 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
=> 0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
=> 0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dea in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
=> 0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ded in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
=> 0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048def in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
=> 0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
=> 0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df4 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
=> 0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r $ecx
ecx            0x6	6
(gdb) i r $ecx[C[C[C[C[C[Crt[Ki r $ecx[K[K[K[K[K[K[K[Kp/x ($esp + 8)
$4 = 0xffffd5c8
(gdb) x/s 0xffffd5c8
0xffffd5c8:	"\350\325\377\377<\223\004\b\020\331\004\b\304\326\377\377"
(gdb) x/s 0xffffd5c8[C[C[C[C[C[Cp/x ($esp + 8)[C[C[C[C[C[C[6Pi r $ecx[C[C[C[C[C[Crt[K[K[Ki r $eax
eax            0x0	0
(gdb) i r $eax[K[Kdx
edx            0x1	1
(gdb) rt
0x08048df8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
=> 0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dfc in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
=> 0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dff in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
=> 0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt[K[Ki r es[K[K$esp
esp            0xffffd5c0	0xffffd5c0
(gdb) ox/[K[K[Kx/[K[Kp/x $exp
$5 = Value can't be converted to integer.
(gdb) s/x [K[K[K[Kx/s 0xffffd5c0
0xffffd5c0:	"\001"
(gdb) x/s 0xffffd5c0[C[C[C[C[C[C[6Pp/x $exp[K[K[Ki r $esp[K[Kdx
edx            0x1	1
(gdb) si
0x08048dcc in func4 ()
(gdb) rt
0x08048dcd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
=> 0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r $ebx
ebx            0x7	7
(gdb) i r $ebx[K[Ksp
esp            0xffffd5b8	0xffffd5b8
(gdb) p[Ks/x[K[K[Kx/s0xff[K[K[K[K 0xffffd5b8
0xffffd5b8:	"\016"
(gdb) print *(int*) 0xffffd5b8
$6 = 14
(gdb) ir[K[Krt
0x08048dce in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
=> 0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
=> 0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd5 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
=> 0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd9 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
=> 0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddf in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
=> 0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
=> 0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de3 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
=> 0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de6 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
=> 0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
=> 0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dea in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
=> 0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ded in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
=> 0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048def in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
=> 0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
=> 0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df4 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
=> 0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
=> 0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dfc in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
=> 0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) tr
Tracepoint 3 at 0x8048dfc
(gdb) i r
eax            0x0	0
ecx            0x2	2
edx            0x1	1
ebx            0x3	3
esp            0xffffd5a0	0xffffd5a0
ebp            0xffffd628	0xffffd628
esi            0x6	6
edi            0x0	0
eip            0x8048dfc	0x8048dfc <func4+48>
eflags         0x202	[ IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) print *(int*)0xffffd5a0
$7 = 1
(gdb) rt
0x08048dff in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
=> 0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e04 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
=> 0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x1	1
ecx            0x1	1
edx            0x1	1
ebx            0x3	3
esp            0xffffd5a0	0xffffd5a0
ebp            0xffffd628	0xffffd628
esi            0x6	6
edi            0x0	0
eip            0x8048e04	0x8048e04 <func4+56>
eflags         0x282	[ SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) print *(int*) 0xffffd5a0
$8 = 1
(gdb) rt
0x08048e06 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
=> 0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e23 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
=> 0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e26 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
=> 0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e27 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
=> 0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e28 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
=> 0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) tr
Tracepoint 4 at 0x8048e28
(gdb) rt
0x08048e04 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
=> 0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e06 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
=> 0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e23 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
=> 0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e26 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
=> 0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e27 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
=> 0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e28 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
=> 0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e7d in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
=> 0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r $eax
eax            0xb	11
(gdb) r Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 6

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
=> 0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5e0	0xffffd5e0
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048e78	0x8048e78 <phase_4+79>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) print *(int)[K*) 0xffffd5e0
$9 = 1
(gdb) print *(int*) 0xffffd5e0[K[K[K628
$10 = 0
(gdb) si
0x08048dcc in func4 ()
(gdb) rt
0x08048dcd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
=> 0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x1	1
ecx            0x0	0
edx            0xffffd5fc	-10756
ebx            0xffffd6c4	-10556
esp            0xffffd5d8	0xffffd5d8
ebp            0xffffd628	0xffffd628
esi            0x0	0
edi            0x0	0
eip            0x8048dcd	0x8048dcd <func4+1>
eflags         0x297	[ CF PF AF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) pi[Krint *(int*) 0xffffd5d8
$11 = 0
(gdb) print *(int*) 0xffffd5d8[K[K[K[Kd628
$12 = 0
(gdb) rt
0x08048dce in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
=> 0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
=> 0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd5 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
=> 0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dd9 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
=> 0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddd in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
=> 0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ddf in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
=> 0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
=> 0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de3 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
=> 0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de6 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
=> 0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048de8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
=> 0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dea in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
=> 0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048ded in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
=> 0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048def in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
=> 0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x0	0
ecx            0x7	7
edx            0x1	1
ebx            0x7	7
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048def	0x8048def <func4+35>
eflags         0x206	[ PF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) p 8[K*(int*) 0xffffd5c0
$13 = 134535440
(gdb) p *(int*) 0xffffd5c0[K[K[K628
$14 = 0
(gdb) rt
0x08048df1 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
=> 0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df4 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
=> 0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048df8 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
=> 0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dfc in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
=> 0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048dff in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
=> 0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x0	0
ecx            0x6	6
edx            0x1	1
ebx            0x7	7
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048dff	0x8048dff <func4+51>
eflags         0x206	[ PF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) p *(int*) 0xffffd5c0
$15 = 1
(gdb) p *(int*) 0xffffd5c0[K[K[K628
$16 = 0
(gdb) rt
0x08048e04 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
=> 0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) i r
eax            0x4	4
ecx            0x1	1
edx            0x1	1
ebx            0x7	7
esp            0xffffd5c0	0xffffd5c0
ebp            0xffffd628	0xffffd628
esi            0xe	14
edi            0x0	0
eip            0x8048e04	0x8048e04 <func4+56>
eflags         0x286	[ PF SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb)  *(int [K*) 0xffffd5c0
Undefined command: "".  Try "help".
(gdb)  *(int*) 0xffffd5c0[1@p
$17 = 1
(gdb) p *(int*) 0xffffd5c0[K[K[K628
$18 = 0
(gdb) rt
0x08048e06 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
=> 0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e23 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
=> 0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e26 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
=> 0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e27 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
=> 0x08048e27 <+91>:	pop    %esi
   0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e28 in func4 ()
Dump of assembler code for function func4:
   0x08048dcc <+0>:	push   %esi
   0x08048dcd <+1>:	push   %ebx
   0x08048dce <+2>:	sub    $0x14,%esp
   0x08048dd1 <+5>:	mov    0x20(%esp),%edx
   0x08048dd5 <+9>:	mov    0x24(%esp),%eax
   0x08048dd9 <+13>:	mov    0x28(%esp),%esi
   0x08048ddd <+17>:	mov    %esi,%ecx
   0x08048ddf <+19>:	sub    %eax,%ecx
   0x08048de1 <+21>:	mov    %ecx,%ebx
   0x08048de3 <+23>:	shr    $0x1f,%ebx
   0x08048de6 <+26>:	add    %ebx,%ecx
   0x08048de8 <+28>:	sar    %ecx
   0x08048dea <+30>:	lea    (%ecx,%eax,1),%ebx
   0x08048ded <+33>:	cmp    %edx,%ebx
   0x08048def <+35>:	jle    0x8048e08 <func4+60>
   0x08048df1 <+37>:	lea    -0x1(%ebx),%ecx
   0x08048df4 <+40>:	mov    %ecx,0x8(%esp)
   0x08048df8 <+44>:	mov    %eax,0x4(%esp)
   0x08048dfc <+48>:	mov    %edx,(%esp)
   0x08048dff <+51>:	call   0x8048dcc <func4>
   0x08048e04 <+56>:	add    %ebx,%eax
   0x08048e06 <+58>:	jmp    0x8048e23 <func4+87>
   0x08048e08 <+60>:	mov    %ebx,%eax
   0x08048e0a <+62>:	cmp    %edx,%ebx
   0x08048e0c <+64>:	jge    0x8048e23 <func4+87>
   0x08048e0e <+66>:	mov    %esi,0x8(%esp)
   0x08048e12 <+70>:	lea    0x1(%ebx),%eax
   0x08048e15 <+73>:	mov    %eax,0x4(%esp)
   0x08048e19 <+77>:	mov    %edx,(%esp)
   0x08048e1c <+80>:	call   0x8048dcc <func4>
   0x08048e21 <+85>:	add    %ebx,%eax
   0x08048e23 <+87>:	add    $0x14,%esp
   0x08048e26 <+90>:	pop    %ebx
   0x08048e27 <+91>:	pop    %esi
=> 0x08048e28 <+92>:	ret    
End of assembler dump.
(gdb) rt
0x08048e7d in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
=> 0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) i r %eax
Invalid register `%eax'
(gdb) ir #[K$eac[1@ 
Invalid register `eac'
(gdb) i r $eac[Kx
eax            0xb	11
(gdb) r Defuse_Commands.txt 
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/ylu236/fall2015/cs485g/p1/bomb92/bomb Defuse_Commands.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 8

Breakpoint 1, 0x08048e29 in phase_4 ()
(gdb) rt
0x08048e2c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
=> 0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e30 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
=> 0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e34 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
=> 0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e38 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
=> 0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e3c in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
=> 0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e44 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
=> 0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e48 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
=> 0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e4b in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
=> 0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e50 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
=> 0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e53 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
=> 0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rr[Kt
0x08048e55 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
=> 0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e5a in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
=> 0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e61 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
=> 0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e69 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
=> 0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e71 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
=> 0x08048e71 <+72>:	mov    0x18(%esp),%eax
   0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e75 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11>:	lea    0x18(%esp),%eax
   0x08048e38 <+15>:	mov    %eax,0x8(%esp)
   0x08048e3c <+19>:	movl   $0x804a771,0x4(%esp)
   0x08048e44 <+27>:	mov    0x30(%esp),%eax
   0x08048e48 <+31>:	mov    %eax,(%esp)
   0x08048e4b <+34>:	call   0x80488d0 <__isoc99_sscanf@plt>
   0x08048e50 <+39>:	cmp    $0x2,%eax
   0x08048e53 <+42>:	jne    0x8048e5c <phase_4+51>
   0x08048e55 <+44>:	cmpl   $0xe,0x18(%esp)
   0x08048e5a <+49>:	jbe    0x8048e61 <phase_4+56>
   0x08048e5c <+51>:	call   0x8049455 <explode_bomb>
   0x08048e61 <+56>:	movl   $0xe,0x8(%esp)
   0x08048e69 <+64>:	movl   $0x0,0x4(%esp)
   0x08048e71 <+72>:	mov    0x18(%esp),%eax
=> 0x08048e75 <+76>:	mov    %eax,(%esp)
   0x08048e78 <+79>:	call   0x8048dcc <func4>
   0x08048e7d <+84>:	cmp    $0x13,%eax
   0x08048e80 <+87>:	jne    0x8048e89 <phase_4+96>
   0x08048e82 <+89>:	cmpl   $0x13,0x1c(%esp)
   0x08048e87 <+94>:	je     0x8048e8e <phase_4+101>
   0x08048e89 <+96>:	call   0x8049455 <explode_bomb>
   0x08048e8e <+101>:	add    $0x2c,%esp
   0x08048e91 <+104>:	ret    
End of assembler dump.
(gdb) rt
0x08048e78 in phase_4 ()
Dump of assembler code for function phase_4:
   0x08048e29 <+0>:	sub    $0x2c,%esp
   0x08048e2c <+3>:	lea    0x1c(%esp),%eax
   0x08048e30 <+7>:	mov    %eax,0xc(%esp)
   0x08048e34 <+11