package helloOpenGL;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.ByteBuffer;
import java.awt.image.DataBufferByte; 


import java.nio.ByteOrder;
import java.util.Hashtable;

import javax.imageio.ImageIO;
import com.jogamp.opengl.*;
import com.jogamp.opengl.glu.GLU;
import com.jogamp.opengl.glu.GLUquadric;

import com.jogamp.opengl.util.awt.TextRenderer;





public class JoglEventListener implements GLEventListener, KeyListener, MouseListener, MouseMotionListener {
	
	
	float backrgb[] = new float[4]; 
	float rot; 
	float rotX; 
	
	/*
	 * Custom variables for mouse drag operations 
	 */
	int windowWidth, windowHeight;
	float orthoX=40;
	float tVal_x, tVal_y, rVal_x, rVal_y, rVal;
	double rtMat[] = new double[16];
	int mouseX0, mouseY0;
	int saveRTnow=0, mouseDragButton=0;
	GLUquadric earth;
	int texID[]  = new int[3]; 
    
	
	float sunUnit = 1.0f;
	float earthUnit = 0.32f;
	float moonUnit = 0.11f;
	 float[] lightPos = { 10,10,10,1 };        // light position

    	private GLU glu = new GLU();
    	private class Vector3{
    		private double data[];


    		public Vector3(){}
    		public Vector3(double x, double y, double z){
    			data = new double[3];
    			data[0] = x;
    			data[1]=y;
    			data[2]=z;
    		}
    		public double getX() {
    			return data[0];
    		}
    		public void setX(double x) {
    			data[0] = x;
    		}
    		public double getY() {
    			return data[1];
    		}
    		public void setY(double y) {
    			data[1] = y;
    		}
    		public double getZ() {
    			return data[2];
    		}
    		public void setZ(double z) {
    			data[2] = z;
    		}
    		
    		
    	}
	
	 public void displayChanged(GLAutoDrawable gLDrawable, 
	            boolean modeChanged, boolean deviceChanged) {
	    }

	    /** Called by the drawable immediately after the OpenGL context is
	     * initialized for the first time. Can be used to perform one-time OpenGL
	     * initialization such as setup of lights and display lists.
	     * @param gLDrawable The GLAutoDrawable object.
	     */
	    public void init(GLAutoDrawable gLDrawable) {
	        GL2 gl = gLDrawable.getGL().getGL2();
	        //gl.glShadeModel(GL.GL_LINE_SMOOTH);              // Enable Smooth Shading
	        gl.glClearColor(0.0f, 0.0f, 0.0f, 0.5f);    // Black Background
	        //gl.glClearDepth(1.0f);                      // Depth Buffer Setup
	        gl.glEnable(GL.GL_DEPTH_TEST);              // Enables Depth Testing
	        //gl.glDepthFunc(GL.GL_LEQUAL);               // The Type Of Depth Testing To Do
	        // Really Nice Perspective Calculations
	        //gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT, GL.GL_NICEST);

	        earth = glu.gluNewQuadric();
	        
	        gl.glMatrixMode(GL2.GL_MODELVIEW);
	        gl.glLoadIdentity();
	        gl.glGetDoublev(GL2.GL_MODELVIEW_MATRIX, rtMat, 0);
	        
	        
	       
	        float[] noAmbient = { 0.2f, 0.2f, 0.2f, 1f };     // low ambient light
	        float[] diffuse = { 1.0f, 1.0f, 1.0f, 1f };        // full diffuse color

	        gl.glEnable(GL2.GL_LIGHTING);
	        gl.glEnable(GL2.GL_LIGHT0);
	        gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_AMBIENT, noAmbient, 0);
	        gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_DIFFUSE, diffuse, 0);
	        gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_POSITION,lightPos, 0);
	        
	        gl.glEnable(GL2.GL_RESCALE_NORMAL );

	        
	        
	        // load an image; 
	        try {
				BufferedImage aImage = ImageIO.read(new File("c:\\temp\\UKY.jpg"));
				//URL url = new URL("http:\\")
				ByteBuffer buf = convertImageData(aImage);
				
				gl.glGenTextures(3, texID, 0);
				gl.glBindTexture(GL.GL_TEXTURE_2D, texID[0]);
				
				gl.glTexParameteri(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_MIN_FILTER, GL.GL_LINEAR);
		        gl.glTexParameteri(GL.GL_TEXTURE_2D, GL.GL_TEXTURE_MAG_FILTER, GL.GL_LINEAR);

				gl.glTexImage2D(GL.GL_TEXTURE_2D, 0, GL.GL_RGB, aImage.getWidth(), 
	                    aImage.getHeight(), 0, GL2.GL_BGR, GL.GL_UNSIGNED_BYTE, buf);
				
				
				gl.glEnable(GL.GL_TEXTURE_2D);
				
				gl.glTexEnvf(GL2.GL_TEXTURE_ENV, GL2.GL_TEXTURE_ENV_MODE, GL2.GL_MODULATE);
				gl.glTexEnvf(GL2.GL_TEXTURE_ENV, GL2.GL_TEXTURE_ENV_MODE, GL2.GL_REPLACE);
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
	    }


	    
	    private ByteBuffer convertImageData(BufferedImage bufferedImage) {
	        ByteBuffer imageBuffer;
	        //WritableRaster raster;
	        //BufferedImage texImage;

	        /*
	        ColorModel glAlphaColorModel = new ComponentColorModel(ColorSpace
	                .getInstance(ColorSpace.CS_sRGB), new int[] { 8, 8, 8, 8 },
	                true, false, Transparency.TRANSLUCENT, DataBuffer.TYPE_BYTE);

	        raster = Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,
	                bufferedImage.getWidth(), bufferedImage.getHeight(), 4, null);
	        texImage = new BufferedImage(glAlphaColorModel, raster, true,
	                new Hashtable());

	        // copy the source image into the produced image
	        Graphics g = texImage.getGraphics();
	        g.setColor(new Color(0f, 0f, 0f, 0f));
	        g.fillRect(0, 0, 256, 256);
	        g.drawImage(bufferedImage, 0, 0, null);
*/
	        // build a byte buffer from the temporary image
	        // that be used by OpenGL to produce a texture.
	        
	        DataBuffer buf = bufferedImage.getRaster().getDataBuffer(); 
	      
	        
	        final byte[] data = ((DataBufferByte) buf).getData();

	        //byte[] data = ((DataBufferByte) texImage.getRaster().getDataBuffer())
	          //      .getData();

	        //System.out.printf("%d %d, %d\n", bufferedImage.getWidth(), bufferedImage.getHeight(), data.length); 
	        //imageBuffer = ByteBuffer.allocateDirect(data.length);
	        //imageBuffer.order(ByteOrder.nativeOrder());
	        //imageBuffer.put(data, 0, data.length);
	        //imageBuffer.flip();

	        //return imageBuffer;
	        
	        return (ByteBuffer.wrap(data)); 
	    }
	    
	    
	    public void reshape(GLAutoDrawable gLDrawable, int x, int y, int width, 
	            int height) {
	    	windowWidth = width;
	    	windowHeight = height;
	        final GL2 gl = gLDrawable.getGL().getGL2();

	        if (height <= 0) // avoid a divide by zero error!
	            height = 1;
	        final float h = (float) width / (float) height;
	        gl.glViewport(0, 0, width, height);
	        gl.glMatrixMode(GL2.GL_PROJECTION);
	        gl.glLoadIdentity();
	        //gl.glOrtho(-orthoX*0.5, orthoX*0.5, -orthoX*0.5*height/width, orthoX*0.5*height/width, -100, 100);
	        glu.gluPerspective(45.0f, h, 1.0, 200.0);
	        
	        gl.glMatrixMode(GL2.GL_MODELVIEW);
	        gl.glLoadIdentity();
	        glu.gluLookAt(0, 0, 6, 0, 0, 0, 0, 1, 0);
	    }
            
            
            public void drawSphere(GL2 gl,float offset){
                
                int step = 10;
                int latN = 180/step +1;
                int longtiN = 360/step;
                Vector3[][] xyz = new Vector3[latN][longtiN];
                int i = 0, j = 0;
                
                for(double lat = -90; lat <90 + step; lat +=step, i++){
                    double y = Math.sin(lat*Math.PI/180);
                    j=0;
                    for(float longti = -180; longti<180; longti+=step, j++){
                        double r = Math.cos(lat*Math.PI/180);
                        double x = Math.cos(longti*Math.PI/180)*r;
                        double z = Math.sin(longti*Math.PI/180)*r;
                        
                        xyz[i][j] = new Vector3(x,y,z);
                    }
                }
               gl.glPolygonMode(GL2.GL_FRONT, GL2.GL_FILL);
                gl.glPolygonMode(GL2.GL_BACK, GL2.GL_LINE);

                gl.glBegin(GL2.GL_TRIANGLES);
                gl.glColor4f(1, 0, 0, 1);

                for (i = 0; i < latN - 1; i++) {
                    for (j = 0; j < longtiN; j++) {
                        Vector3 p0 = xyz[i][j];
                        Vector3 p1 = xyz[i + 1][j];
                        Vector3 p2 = xyz[i + 1][(j + 1) % longtiN];
                        Vector3 p3 = xyz[i][(j + 1) % longtiN];

                        gl.glVertex3d(p0.getX(), p0.getY(), p0.getZ());
                        gl.glVertex3d(p1.getX(), p1.getY(), p1.getZ());
                        gl.glVertex3d(p2.getX(), p2.getY(), p2.getZ());

                        gl.glVertex3d(p0.getX(), p0.getY(), p0.getZ());
                        gl.glVertex3d(p2.getX(), p2.getY(), p2.getZ());
                        gl.glVertex3d(p3.getX(), p3.getY(), p3.getZ());
 	 
                    }
                }
  
                gl.glEnd();
                
            }
	    public void drawCube(final GL2 gl) {
	    	gl.glBegin(GL2.GL_QUADS);
	         
	    	// on the XY plane
	    	// front plane
	         gl.glNormal3f(0,  0, 1);
	         gl.glColor3f(1, 0, 0);
	         
	         gl.glTexCoord2f(0.0f, 1.0f);
	         gl.glVertex3f(0, 0, 1); 
	        
	         
	         
	         gl.glTexCoord2f(1.0f, 1.0f);
	         gl.glVertex3f(1, 0, 1);
	         
	         gl.glTexCoord2f(1.0f, 0.0f);
	         gl.glVertex3f(1, 1, 1); 
	         
	         gl.glTexCoord2f(0.0f, 0.0f);
	         gl.glVertex3f(0, 1, 1);
	        
	         gl.glTexCoord2f(98.0f/255, 136.0f/255);
	         // back plane
	         gl.glNormal3f(0,  0, -1);
	         gl.glColor3f(1, 0, 0);
	         gl.glVertex3f(0, 0, 0); 
	         gl.glVertex3f(1, 0, 0);
	         gl.glVertex3f(1, 1, 0); 
	         gl.glVertex3f(0, 1, 0);
	         
	         // on the YZ plane
	         // left plane 
	         gl.glNormal3f(-1,  0, 0);
	         gl.glColor3f(0, 1, 0);
	         gl.glVertex3f(0, 0, 0); 
	         gl.glVertex3f(0, 1, 0);
	         gl.glVertex3f(0, 1, 1); 
	         gl.glVertex3f(0, 0, 1);
	         
	         // right plane
	         gl.glNormal3f(1,  0, 0);
	         gl.glColor3f(0, 1, 0);
	         gl.glVertex3f(1, 0, 0); 
	         gl.glVertex3f(1, 1, 0);
	         gl.glVertex3f(1, 1, 1); 
	         gl.glVertex3f(1, 0, 1);
	         
	         
	         // on the XZ plane,  
	         // up plane; 
	         gl.glNormal3f(0,  1, 0);
	         gl.glColor3f(0, 0, 1);
	         gl.glTexCoord2f(0+0.2f, 1-(1-0.2f));gl.glVertex3f(0, 1, 0); 
	         gl.glTexCoord2f(1-0.2f, 1-(1-0.2f));gl.glVertex3f(1, 1, 0);
	         gl.glTexCoord2f(1-0.2f, 1-(0 + 0.2f));gl.glVertex3f(1, 1, 1); 
	         gl.glTexCoord2f(0+0.2f, 1-(0 + 0.2f));gl.glVertex3f(0, 1, 1);
	         
	         // down plane; 
	         gl.glNormal3f(0,  -1, 0);
	         gl.glColor3f(0, 0, 1);
	         gl.glVertex3f(0, 0, 0); 
	         gl.glVertex3f(1, 0, 0);
	         gl.glVertex3f(1, 0, 1); 
	         gl.glVertex3f(0, 0, 1);
	        
	         gl.glEnd(); 
	    }
		@Override
		public void display(GLAutoDrawable gLDrawable) {
			// TODO Auto-generated method stub
			final GL2 gl = gLDrawable.getGL().getGL2();

			//gl.glClearColor(backrgb[0], 0, 1, 1);
			gl.glClearColor(0.5f, 0.5f, 0.5f, 1);
			gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);

			//backrgb[0]+=0.0005;
			//if (backrgb[0]> 1) backrgb[0] = 0; 

			
	         //glu.gluQuadricDrawStyle(earth, GLU.GLU_LINE);

	         
	         //glu.gluDeleteQuadric(earth);

	        glu.gluLookAt(0.0, 0.0, -4.0, 0.0, 0.0, 1.0, 0.0, -3.0, 0.0);
	        gl.glColor3f(1.0f, 1.0f, 0.0f);
	        drawSphere(gl,1.0f);
	        
	    
	         
		}

		@Override
		public void dispose(GLAutoDrawable arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void keyTyped(KeyEvent e) {
			// TODO Auto-generated method stub
		    char key= e.getKeyChar();
			System.out.printf("Key typed: %c\n", key); 
			if (key == KeyEvent.VK_ESCAPE )
				System.exit(0);
		}

		@Override
		public void keyPressed(KeyEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void keyReleased(KeyEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseDragged(MouseEvent e) {
			
			float XX = (e.getX()-windowWidth*0.5f)*orthoX/windowWidth;
			float YY = -(e.getY()-windowHeight*0.5f)*orthoX/windowWidth;
			
			rot += (e.getX()-mouseX0)*0.5;		
			rotX += (e.getY() - mouseY0)*0.5; 
			
			mouseX0 = e.getX(); 
			mouseY0 = e.getY(); 
		}
		
		@Override
		public void mouseMoved(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseClicked(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			/*
			 * Coordinates printout
			 */
			float XX = (e.getX()-windowWidth*0.5f)*orthoX/windowWidth;
			float YY = -(e.getY()-windowHeight*0.5f)*orthoX/windowWidth;
			System.out.printf("Point clicked: (%.3f, %.3f)\n", XX, YY);
			
			mouseX0 = e.getX();
			mouseY0 = e.getY();
			if(e.getButton()==MouseEvent.BUTTON1) {	// Left button
				
			}
			else if(e.getButton()==MouseEvent.BUTTON3) {	// Right button
							}
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		

	  /*  
	public void init(GLDrawable gLDrawable) {
		final GL gl = glDrawable.getGL();
        final GLU glu = glDrawable.getGLU();

        gl.glMatrixMode(GL.GL_PROJECTION);
        gl.glLoadIdentity();
        glu.gluOrtho2D(-1.0f, 1.0f, -1.0f, 1.0f); // drawing square
        gl.glMatrixMode(GL.GL_MODELVIEW);
        gl.glLoadIdentity();
    }*/
	
}



